package com.atao.dftt.util.hstt;

import java.io.UnsupportedEncodingException;
import java.security.InvalidKeyException;
import java.security.Key;
import java.security.NoSuchAlgorithmException;
import java.util.Date;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.spec.SecretKeySpec;

public class AES {
	public class AESDecodeException extends Exception {
		public AESDecodeException(Throwable arg1) {
			super(arg1);
		}

		public AESDecodeException(String arg1) {
			super(arg1);
		}
	}

	static boolean a = false;
	private static final Object b;

	static {
		b = "AES";
	}

	public static String a(byte[] arg5) {
		StringBuffer v0 = new StringBuffer();
		int v1;
		for (v1 = 0; v1 < arg5.length; ++v1) {
			String v2 = Integer.toHexString(arg5[v1] & 255);
			if (v2.length() == 1) {
				v2 = '0' + v2;
			}

			v0.append(v2.toUpperCase());
		}

		return v0.toString();
	}

	public static byte[] a(String arg6) {
		if (arg6.length() < 1) {
			return null;
		}

		byte[] v0 = new byte[arg6.length() / 2];
		int v1;
		for (v1 = 0; v1 < arg6.length() / 2; ++v1) {
			int v2 = v1 * 2;
			int v3 = v2 + 1;
			v0[v1] = ((byte) (Integer.parseInt(arg6.substring(v2, v3), 16) * 16
					+ Integer.parseInt(arg6.substring(v3, v2 + 2), 16)));
		}

		return v0;
	}

	private static byte[] a(String arg2, String arg3) {
		try {
			SecretKeySpec v0 = new SecretKeySpec(AES.d(arg3), "AES");
			Cipher v3 = Cipher.getInstance("AES/ECB/PKCS5Padding");
			byte[] v2_6 = arg2.getBytes("utf-8");
			v3.init(1, ((Key) v0));
			return v3.doFinal(v2_6);
		} catch (BadPaddingException v2) {
			v2.printStackTrace();
		} catch (IllegalBlockSizeException v2_1) {
			v2_1.printStackTrace();
		} catch (UnsupportedEncodingException v2_2) {
			v2_2.printStackTrace();
		} catch (InvalidKeyException v2_3) {
			v2_3.printStackTrace();
		} catch (NoSuchPaddingException v2_4) {
			v2_4.printStackTrace();
		} catch (NoSuchAlgorithmException v2_5) {
			v2_5.printStackTrace();
		}

		return null;
	}

	private static byte[] a(byte[] arg2, String arg3) {
		try {
			SecretKeySpec v0 = new SecretKeySpec(AES.d(arg3), "AES");
			Cipher v3 = Cipher.getInstance("AES/ECB/PKCS5Padding");
			v3.init(2, ((Key) v0));
			return v3.doFinal(arg2);
		} catch (BadPaddingException v2) {
			v2.printStackTrace();
		} catch (IllegalBlockSizeException v2_1) {
			v2_1.printStackTrace();
		} catch (InvalidKeyException v2_2) {
			v2_2.printStackTrace();
		} catch (NoSuchPaddingException v2_3) {
			v2_3.printStackTrace();
		} catch (NoSuchAlgorithmException v2_4) {
			v2_4.printStackTrace();
		}

		return null;
	}

	public static String b(String arg1) {
		return AES.a(AES.a(arg1, "382d2402cd6d7191"));
	}

	public static String c(String arg1) {
		try {
			return new String(AES.a(AES.a(arg1), "382d2402cd6d7191"));
		} catch (Exception v1) {
		}
		return null;
	}

	private static byte[] d(String arg0) {
		if (arg0 != null) {
			return arg0.getBytes();
		}

		return new byte[24];
	}
	
	public static void main(String[] args) {
		String s = AES.c
		System.out.println(s);
	}
}
